#!/usr/bin/python3
############################### HAtester.py #####################################
#     Version 2.2    Jobin Augustine, Fernando Laudares Camargos (2017-2021)
#
# Program to test reads and writes in a PostgreSQL server, including
# connection retry on connection failure to test load-balancing capabilities
# 

# PREREQUISITES
# 1) PostgreSQL Python connector python3-psycopg2
# 2) Target table HATEST must have been created in advance:
#    CREATE TABLE HATEST (TM TIMESTAMP);
#    CREATE UNIQUE INDEX idx_hatext ON hatest (tm desc);
# 3) Monitor replication using : SELECT tm FROM hatest ORDER BY tm DESC LIMIT 1; 

import sys

# CONNECTION DETAILS
# host = "localhost"
host="172.17.0.2"
dbname = "postgres"
user = "postgres"
password = "zalando"
connect_timeout = 5
# Port number can be optionally provided as first argument
if len(sys.argv)>1 and int(sys.argv[1]):
  port = int(sys.argv[1])
else:
  port = 5432

# Connection string
connectionString = "host=%s port=%i dbname=%s user=%s password=%s connect_timeout=%i" % (host, port, dbname, user, password, connect_timeout)

# Execute Insert statement against table if doDML is true.
# create a table in advance: 
doDML = True

# USAGE 
#
# - Execution:
#    ./HAtester.py <port>
#
# - Reconnection:
#    Ctrl+C will trigger a new connection to test load balancing.
#
# - Stop execution:
#    Ctrl+Z to pause the job, then terminate it with: kill %<job_id>
#
###############################################################################

import sys,time,psycopg2
def create_conn():
   try:
      conn = psycopg2.connect(connectionString)
   except psycopg2.Error as e:
      print("Unable to connect to database :")
      print(e)
      sys.exit(1)
   return conn

if __name__ == "__main__":
   conn = create_conn()
   if conn is not None:
      cur = conn.cursor()
      while True:
         try:
            time.sleep(1)
            if conn is not None:
               cur = conn.cursor()
            else:
               raise Exception("Connection not ready")
            #Check connected to master or Slave
            cur.execute("select pg_is_in_recovery(),inet_server_addr()")
            rows = cur.fetchone()
            if (rows[0] == False):
               print (" Working with:   MASTER - %s" % rows[1]),
               if doDML:
                  cur.execute("INSERT INTO HATEST VALUES(CURRENT_TIMESTAMP) RETURNING TM")
                  cur.execute("SELECT dblink_connect('conn_db_link','server_patronidemo2_1_remote')")
                  cur.execute("INSERT INTO LAG_STATS VALUES(SELECT * from dblink('conn_db_link', 'select sender_host, \
                  	slot_name, status, written_lsn, flushed_lsn, \
						   last_msg_send_time, last_msg_receipt_time, latest_end_lsn, latest_end_time, \
						   pg_wal_lsn_diff(pg_last_wal_receive_lsn(), pg_last_wal_replay_lsn()), \
						   pg_last_wal_receive_lsn(), pg_last_wal_replay_lsn(), \
						   pg_last_xact_replay_timestamp() from pg_stat_wal_receiver')  \
						AS x(		\
							sender_host   text,	\
							slot_name     text,	\
							status        text,	\
							written_lsn   pg_lsn,	\
							flushed_lsn   pg_lsn,	\
							last_msg_send_time	    timestamp with time zone,	\
							last_msg_receipt_time   timestamp with time zone,	\
							latest_end_lsn	    pg_lsn, 						\
							latest_end_time	    timestamp with time zone, 		\
							pg_wal_lsn_diff     int, 							\
							pg_last_wal_receive_lsn	    pg_lsn, 				\
							pg_last_wal_replay_lsn	    pg_lsn, 				\
							pg_last_xact_replay_timestamp timestamp with time zone)") 
                  cur.execute("SELECT dblink_disconnect('conn_db_link')")
                  conn.commit()
               else:
                  print ("No Attempt to insert data")
            else:
               print (" Working with:    REPLICA - %s" % rows[1]),
               if doDML:
                  cur.execute("SELECT MAX(TM) FROM HATEST")
                  row = cur.fetchone()
                  print ("     Retrived: %s\n" % str(row[0]))
               else:
                  print ("No Attempt to retrive data")
         except:
            print ("Trying to connect")
            if conn is not None:
               conn.close()
            conn = create_conn()
            if conn is not None:
                 cur = conn.cursor()

   conn.close()



