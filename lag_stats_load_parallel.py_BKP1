#!/usr/bin/python3
############################### HAtester.py #####################################
#     Version 2.2    Jobin Augustine, Fernando Laudares Camargos (2017-2021)
#
# Program to test reads and writes in a PostgreSQL server, including
# connection retry on connection failure to test load-balancing capabilities
# 

# PREREQUISITES
# 1) PostgreSQL Python connector python3-psycopg2
# 2) Target table HATEST must have been created in advance:
#    CREATE TABLE HATEST (TM TIMESTAMP);
#    CREATE UNIQUE INDEX idx_hatext ON hatest (tm desc);
# 3) Monitor replication using : SELECT tm FROM hatest ORDER BY tm DESC LIMIT 1; 

import sys
import multiprocessing
import time
from datetime import datetime

cluster = sys.argv[2]
# print (cluster)
if len(sys.argv) > 3:
  print(len(sys.argv))
  print ("Syntax is <script> 5000 [cluster]")
  sys.exit(0)

# CONNECTION DETAILS
# host = "localhost"
host="172.17.0.2"
dbname = "postgres"
user = "postgres"
password = "zalando"
connect_timeout = 5
# Port number can be optionally provided as first argument
if len(sys.argv)>1 and int(sys.argv[1]):
  port = int(sys.argv[1])
else:
  port = 5432

# Connection string
connectionString = "host=%s port=%i dbname=%s user=%s password=%s connect_timeout=%i" % (host, port, dbname, user, password, connect_timeout)

# Execute Insert statement against table if doDML is true.
# create a table in advance: 
doDML = True

# USAGE 
#
# - Execution:
#    ./HAtester.py <port>
#
# - Reconnection:
#    Ctrl+C will trigger a new connection to test load balancing.
#
# - Stop execution:
#    Ctrl+Z to pause the job, then terminate it with: kill %<job_id>
#
###############################################################################

import sys,time,psycopg2
def create_conn():
  try:
    conn = psycopg2.connect(connectionString)
  except psycopg2.Error as e:
    print("Unable to connect to database :")
    print(e)
    sys.exit(1)
  return conn


def insert(member):
  conn = create_conn()
  dblink = 'server_' + member + '_remote'
  if conn is not None:
    cur = conn.cursor()
    try:
      cluster = member.split("_")[0]
      member_index = member.split("_")[1]
      cur.execute("INSERT INTO lag_stats_from_primary (usename       , application_name , client_addr, client_hostname  , client_port, \
                      backend_start , backend_xmin     , state  , \
                      sent_lsn      , write_lsn        , flush_lsn  , replay_lsn       , \
                      write_lag     , flush_lag        , replay_lag , \
                      sync_priority , sync_state       , reply_time, creation_date) (Select usename       , application_name , client_addr, client_hostname  , client_port, \
                      backend_start , backend_xmin     , state  , \
                      sent_lsn      , write_lsn        , flush_lsn  , replay_lsn       , \
                      write_lag     , flush_lag        , replay_lag , \
                      sync_priority , sync_state       , reply_time , now()     from pg_stat_replication where application_name = '" + cluster + '-' + member_index + "')") 
      cur.execute("SELECT dblink_connect('conn_db_link','" + dblink + "')")
      cur.execute("INSERT INTO lag_stats_from_secondary (SELECT * from dblink('conn_db_link', 'select sender_host, \
                        slot_name, status, written_lsn, flushed_lsn, \
                        last_msg_send_time, last_msg_receipt_time, latest_end_lsn, latest_end_time, \
                        pg_wal_lsn_diff(pg_last_wal_receive_lsn(), pg_last_wal_replay_lsn()), \
                        pg_last_wal_receive_lsn(), pg_last_wal_replay_lsn(), \
                        pg_last_xact_replay_timestamp() , now() from pg_stat_wal_receiver')  \
                        AS x(                   \
                        sender_host   text,     \
                        slot_name     text,     \
                        status        text,     \
                        written_lsn   pg_lsn,   \
                        flushed_lsn   pg_lsn,   \
                        last_msg_send_time          timestamp with time zone,   \
                        last_msg_receipt_time   timestamp with time zone,       \
                        latest_end_lsn      pg_lsn,                             \
                        latest_end_time     timestamp with time zone,           \
                        pg_wal_lsn_diff     int,                                \
                       pg_last_wal_receive_lsn     pg_lsn,                      \
                        pg_last_wal_replay_lsn      pg_lsn,                     \
                        pg_last_xact_replay_timestamp timestamp with time zone, \
                        creation_date timestamp with time zone))") 
      cur.execute("SELECT dblink_disconnect('conn_db_link')")
      conn.commit()
      conn.close()
    except psycopg2.Error as e:
      print("INSERT error on dblink " + dblink)
      print(e)
      sys.exit(1)
      
    return True
      

if __name__ == "__main__":
  # multiprocessing pool object
  pool = multiprocessing.Pool()
  
  # pool object with number of element
  pool = multiprocessing.Pool(processes=5)
   
  # input list
  # cluster = 'patronidemo2'
  number_of_pods = 4
  members = []
  for i in range(number_of_pods):
    members.append (cluster + '_' + str(i))

  print(members )
  while True: 
    try:
      ## time.sleep(1)
      call_insert = pool.map(insert, members)
   
      #Check connected to master or Slave
      conn = create_conn()
      cur = conn.cursor()
      cur.execute("select pg_is_in_recovery(),inet_server_addr()")
      rows = cur.fetchone()
      if (rows[0] == False):
        print (" Working with:   MASTER - %s" % rows[1]), 
    except:
      print ("Trying to connect")
      if conn is not None:
        conn.close()
        conn = create_conn()
        if conn is not None:
          cur = conn.cursor()
  conn.close()



